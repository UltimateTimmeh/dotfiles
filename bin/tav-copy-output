#!/bin/bash
# Copy TAVIguide-web task output files.
# v1.0

# Functions


usage() {
    cat <<EOF

Usage: $(basename $0) [options] TASK SRCID TGTID

Copy the output files necessary for completing TASK of case TGTID (which is
an instance of source case SRCID) in TAVIguide-web. TASK can be one of
'seg', 'feapre', 'feapreqc', 'feapost', 'feapostqc' or 'cfdpostqc'.

Options:

  -n : Dry run. Only show what would happen, but don't actually do anything.
  -l : List the available source cases.
  -t SRCTYPE : Specify the type of source case.
        The default source case type is 'BCH' (benchmark cases)
        Other options for the source case type are:
          - 'TAV' (production cases)
          - 'TST' (test cases)
        See section 'Source cases' for more info.
  -c TGTCASESDIR : Target cases directory.
        Also known in TAVIguide-pp as the cases_path where case TSTID can be
        found.
        The default target cases directory is:
          - '/test/cases'
  -u USER : Perform ssh and rsync operation(s) as this user.

Source cases:

  Source cases are located in subdirectories of 'feops1:/srv/webdav/TAV/
  Verification/SystemVerification/testdata', depending on the type:
    - 'BCH' for benchmark cases,
    - 'TAV' for production cases and
    - 'TST' for test cases.
  If you want to change source cases or make new ones available for testing
  purposes, this is where you do it.

Examples:

  1. Listing all production source cases:

       $ $(basename $0) -lt TAV

  2. Copying the output files for completing the segmentation task of
     case TST000321 (which is an instance of production source case TAV000123)
     as user 'feops':

       $ $(basename $0) -u feops -t TAV seg TAV000123 TST000321

     The output files for the selected task will be placed in the correct
     location in TGTCASESDIR. All copied directories and files with SRCID in
     their name will then be renamed by replacing SRCID with TGTID.

EOF
}


element_not_in() {
    # Test if element $1 is not in array ${@:2}.
    local e
    for e in "${@:2}"; do [[ "$e" == "$1" ]] && return 1; done
    return 0
}


remote_ls() {
    # Do a remote ls for directory $2 on machine $1.
    local CONTENTS
    CONTENTS=$(ssh $1 "ls $2")
    echo "$CONTENTS"
}


rename_files_by_replace() {
    # All files in directory $1 (and subdirectories) that have $2 in them are
    # renamed by replacing $2 with $3.
    find $1 -depth -type f -name "$2[.-]*" -exec rename $DRY "s|$2([^/]*)$|$3\$1|" {} \;
}


# Process the arguments.
SRCTYPE=BCH
TGTCASESDIR=/test/cases
LIST=0
DRY=
USER=

OPTIND=1 # Reset in case getopts has been used previously in the shell.

while getopts "nlt:c:r:u:" opt; do
    case "$opt" in
	l)  LIST=1
	    ;;
	n)  DRY=-n
	    ;;
	t)  SRCTYPE=$OPTARG
	    ;;
	c)  TGTCASESDIR=$OPTARG
	    ;;
	u)  USER=$OPTARG
	    ;;
    esac
done

shift $((OPTIND-1))

# Set a few variables.
SRCCASESDIR=feops1:/srv/webdav/TAV/Verification/SystemVerification/testdata/$SRCTYPE
[ "$USER" != "" ] && {
    SRCCASESDIR=$USER@$SRCCASESDIR
}

SRCIDS=$(remote_ls ${SRCCASESDIR//:/ })
[ "$LIST" = "1" ] && {
    # If the -l option is used, only list available source cases.
    echo "The following source cases are available in '$SRCCASESDIR':"
    for ID in $SRCIDS; do
	echo "   $ID"
    done
    exit
}

VALIDTASKS=("seg" "feapre" "feapreqc" "feapost" "feapostqc" "cfdpostqc")
TASK=$1
[ -n "$TASK" ] || { usage; exit 111; }
if element_not_in "$TASK" "${VALIDTASKS[@]}"; then
    echo "Task code '$TASK' is invalid. The following task codes are valid:"
    echo "   ${VALIDTASKS[@]}"
    exit
fi

SRCIDS=($SRCIDS)
SRCID=$2
[ -n "$SRCID" ] || { usage; exit 111; }
if element_not_in "$SRCID" "${SRCIDS[@]}"; then
    echo "Source case '$SRCID' not available in '$SRCCASESDIR'."
    echo "Use the -l option to list available source cases."
    exit
fi

TGTID=$3
[ -n "$TGTID" ] || { usage; exit 111; }

SRCCASEDIR=$SRCCASESDIR/$SRCID
TGTCASEDIR=$TGTCASESDIR/$TGTID
if [ ! -d "$TGTCASEDIR" ]; then
    echo "Target case '$TGTID' was not found in target cases directory '$TGTCASESDIR'."
    echo "Either set the correct target case directory using the -c option, or the"
    echo "correct target cases ID."
    exit
fi

SRCSIMDIR=$SRCCASEDIR/simulations
SRCSIMS=$(remote_ls ${SRCSIMDIR//:/ })
TGTSIMDIR=$TGTCASEDIR/simulations
echo "Simulations for source case '$SRCID':"
for SRCSIM in $SRCSIMS; do
    echo "   $SRCSIM"
done

# Copy files depending on selected task.
[ $TASK = "seg" ] && {
    echo "Copy source case's Segmentation output."
    rsync -avhP $SRCCASEDIR/segmentation/* $TGTCASEDIR/segmentation $DRY
}

[ $TASK = "feapre" ] && {
    echo "Copy source case's FEA Preprocessing output."
    rsync -avhP $SRCCASEDIR/$SRCID-project.pyf $SRCCASEDIR/$SRCID.log $TGTCASEDIR $DRY
    rsync -avhP $SRCCASEDIR/preprocessing/* $TGTCASEDIR/preprocessing $DRY
}

[ $TASK = "feapreqc" ] && {
    echo "Copy source case's FEA Preprocessing QC output."
    for SRCSIM in $SRCSIMS; do
	TGTSIM=${SRCSIM//$SRCID/$TGTID}
	rsync -avhP $SRCSIMDIR/$SRCSIM/* --include "*.inp" --include "*.request" --exclude "*" $TGTSIMDIR/$TGTSIM $DRY
    done
}

[ $TASK = "feapost" ] && {
    echo "Copy source case's FEA Postprocessing output."
    for SRCSIM in $SRCSIMS; do
	TGTSIM=${SRCSIM//$SRCID/$TGTID}
	rsync -avhP $SRCSIMDIR/$SRCSIM/* --include "*slicing.pgf" --include "*slicing.csv" --include "*measurements.csv" --include "*outputfea.csv" --exclude "*" $TGTSIMDIR/$TGTSIM $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/common/* --exclude "*box.pgf.gz" $TGTSIMDIR/$TGTSIM/common $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/aligned/* --exclude "*.png" --exclude "*streamlines.pgf.gz" $TGTSIMDIR/$TGTSIM/aligned $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/misaligned/* --exclude "*.png" --exclude "*streamlines.pgf.gz" $TGTSIMDIR/$TGTSIM/misaligned $DRY
    done
}

[ $TASK = "feapostqc" ] && {
    echo "Copy source case's FEA Postprocessing QC output."
    for SRCSIM in $SRCSIMS; do
	TGTSIM=${SRCSIM//$SRCID/$TGTID}
	rsync -avhP $SRCSIMDIR/$SRCSIM/cfd/* --exclude "results*" $TGTSIMDIR/$TGTSIM/cfd $DRY
    done
}

[ $TASK = "cfdpostqc" ] && {
    echo "Copy source case's CFD Postprocessing QC output."
    for SRCSIM in $SRCSIMS; do
	TGTSIM=${SRCSIM//$SRCID/$TGTID}
	rsync -avhP $SRCSIMDIR/$SRCSIM/* --include "*PVL.csv" --exclude "*" $TGTSIMDIR/$TGTSIM $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/common/* --include "*box.pgf.gz" --exclude "*" $TGTSIMDIR/$TGTSIM/common $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/aligned/* --include "*.png" --include "*streamlines.pgf.gz" --exclude "*" $TGTSIMDIR/$TGTSIM/aligned $DRY
	rsync -avhP $SRCSIMDIR/$SRCSIM/misaligned/* --include "*.png" --include "*streamlines.pgf.gz" --exclude "*" $TGTSIMDIR/$TGTSIM/misaligned $DRY
    done
}

# Rename files.
echo "Rename '$SRCID' to '$TGTID' for files in '$TGTCASEDIR'."
rename_files_by_replace $TGTCASEDIR $SRCID $TGTID
